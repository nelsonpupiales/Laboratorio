import { IonicNativePlugin } from '@ionic-native/core';
/**
 * @name Native Storage
 * @premier nativestorage
 * @description Native storage of variables in Android and iOS
 *
 * @usage
 * ```typescript
 * import { NativeStorage } from '@ionic-native/native-storage/ngx';
 *
 * constructor(private nativeStorage: NativeStorage) { }
 *
 * ...
 *
 * this.nativeStorage.setItem('myitem', {property: 'value', anotherProperty: 'anotherValue'})
 *   .then(
 *     () => console.log('Stored item!'),
 *     error => console.error('Error storing item', error)
 *   );
 *
 * this.nativeStorage.getItem('myitem')
 *   .then(
 *     data => console.log(data),
 *     error => console.error(error)
 *   );
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class NativeStorage extends IonicNativePlugin {
    /**
     * Initialises shared storage with the suite name when using app groups in iOS
     * @param reference {string}
     * @returns {Promise<void>}
     */
    initWithSuiteName(reference: string): Promise<void>;
    /**
     * Stores a value
     * @param reference {string}
     * @param value
     * @returns {Promise<any>}
     */
    setItem(reference: string, value: any): Promise<any>;
    /**
     * Gets a stored item
     * @param reference {string}
     * @returns {Promise<any>}
     */
    getItem(reference: string): Promise<any>;
    /**
     * Retrieving all keys
     * @returns {Promise<any>}
     */
    keys(): Promise<any>;
    /**
     * Removes a single stored item
     * @param reference {string}
     * @returns {Promise<any>}
     */
    remove(reference: string): Promise<any>;
    /**
     * Removes all stored values.
     * @returns {Promise<any>}
     */
    clear(): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NativeStorage, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NativeStorage>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbi8qKlxuICogQG5hbWUgTmF0aXZlIFN0b3JhZ2VcbiAqIEBwcmVtaWVyIG5hdGl2ZXN0b3JhZ2VcbiAqIEBkZXNjcmlwdGlvbiBOYXRpdmUgc3RvcmFnZSBvZiB2YXJpYWJsZXMgaW4gQW5kcm9pZCBhbmQgaU9TXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBOYXRpdmVTdG9yYWdlIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9uYXRpdmUtc3RvcmFnZS9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgbmF0aXZlU3RvcmFnZTogTmF0aXZlU3RvcmFnZSkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5uYXRpdmVTdG9yYWdlLnNldEl0ZW0oJ215aXRlbScsIHtwcm9wZXJ0eTogJ3ZhbHVlJywgYW5vdGhlclByb3BlcnR5OiAnYW5vdGhlclZhbHVlJ30pXG4gKiAgIC50aGVuKFxuICogICAgICgpID0+IGNvbnNvbGUubG9nKCdTdG9yZWQgaXRlbSEnKSxcbiAqICAgICBlcnJvciA9PiBjb25zb2xlLmVycm9yKCdFcnJvciBzdG9yaW5nIGl0ZW0nLCBlcnJvcilcbiAqICAgKTtcbiAqXG4gKiB0aGlzLm5hdGl2ZVN0b3JhZ2UuZ2V0SXRlbSgnbXlpdGVtJylcbiAqICAgLnRoZW4oXG4gKiAgICAgZGF0YSA9PiBjb25zb2xlLmxvZyhkYXRhKSxcbiAqICAgICBlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKVxuICogICApO1xuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5hdGl2ZVN0b3JhZ2UgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGlzZXMgc2hhcmVkIHN0b3JhZ2Ugd2l0aCB0aGUgc3VpdGUgbmFtZSB3aGVuIHVzaW5nIGFwcCBncm91cHMgaW4gaU9TXG4gICAgICogQHBhcmFtIHJlZmVyZW5jZSB7c3RyaW5nfVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIGluaXRXaXRoU3VpdGVOYW1lKHJlZmVyZW5jZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcbiAgICAvKipcbiAgICAgKiBTdG9yZXMgYSB2YWx1ZVxuICAgICAqIEBwYXJhbSByZWZlcmVuY2Uge3N0cmluZ31cbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIHNldEl0ZW0ocmVmZXJlbmNlOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogR2V0cyBhIHN0b3JlZCBpdGVtXG4gICAgICogQHBhcmFtIHJlZmVyZW5jZSB7c3RyaW5nfVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgZ2V0SXRlbShyZWZlcmVuY2U6IHN0cmluZyk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2aW5nIGFsbCBrZXlzXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBrZXlzKCk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgc2luZ2xlIHN0b3JlZCBpdGVtXG4gICAgICogQHBhcmFtIHJlZmVyZW5jZSB7c3RyaW5nfVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgcmVtb3ZlKHJlZmVyZW5jZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIHN0b3JlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBjbGVhcigpOiBQcm9taXNlPGFueT47XG59XG4iXX0=